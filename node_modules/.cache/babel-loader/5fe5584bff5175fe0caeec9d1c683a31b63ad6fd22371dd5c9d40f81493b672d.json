{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kqtan\\\\DS projects\\\\flask-react-app\\\\src\\\\components\\\\Predict.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Predict.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Predict() {\n  _s();\n  const [data, setData] = useState(null);\n  const [constructors, setConstructors] = useState([]);\n  const [drivers, setDrivers] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [selectedDrivers, setSelectedDrivers] = useState({});\n  const [latestRaceName, setLatestRaceName] = useState('');\n  const [latestRaceDate, setLatestRaceDate] = useState('');\n  const [nextRaceCircuit, setNextRaceCircuit] = useState('');\n  const [results, setResults] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  useEffect(() => {\n    fetch('/predict/1').then(res => res.json()).then(data => setData(data)).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  useEffect(() => {\n    const fetchConstructors = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('https://ergast.com/api/f1/2024/constructors.json');\n        const data = await response.json();\n        setConstructors(data.MRData.ConstructorTable.Constructors);\n        for (const constructor of data.MRData.ConstructorTable.Constructors) {\n          const driversResponse = await fetch(`https://ergast.com/api/f1/2024/constructors/${constructor.constructorId}/drivers.json`);\n          const driversData = await driversResponse.json();\n          setDrivers(prev => ({\n            ...prev,\n            [constructor.constructorId]: driversData.MRData.DriverTable.Drivers\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching constructors:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchConstructors();\n  }, []);\n  useEffect(() => {\n    const fetchAllRaces = async () => {\n      try {\n        const response = await fetch('https://ergast.com/api/f1/2024.json');\n        const data = await response.json();\n        const races = data.MRData.RaceTable.Races;\n        const today = new Date().toISOString().split('T')[0];\n        const latestRace = races.filter(race => race.date >= today).sort((a, b) => new Date(a.date) - new Date(b.date))[0];\n        if (latestRace) {\n          setLatestRaceName(latestRace.raceName);\n          setLatestRaceDate(latestRace.date);\n          setNextRaceCircuit(latestRace.Circuit.circuitName); // Store the circuit name\n        } else {\n          setLatestRaceName('No upcoming races found');\n          setLatestRaceDate('');\n          setNextRaceCircuit('');\n        }\n      } catch (error) {\n        console.error(\"Error fetching races:\", error);\n      }\n    };\n    fetchAllRaces();\n  }, []);\n  const driverConstructorPairs = [];\n  constructors.forEach(constructor => {\n    const constructorDrivers = drivers[constructor.constructorId] || [];\n    constructorDrivers.forEach(driver => {\n      driverConstructorPairs.push({\n        driverId: driver.driverId,\n        constructorId: constructor.constructorId,\n        driverName: `${driver.givenName} ${driver.familyName}`,\n        constructorName: constructor.name\n      });\n    });\n  });\n  const handleSelectDriver = (driverId, constructorId) => {\n    const key = `${driverId}-${constructorId}`;\n    setSelectedDrivers(prev => ({\n      ...prev,\n      [key]: !prev[key] // Toggle selection\n    }));\n  };\n\n  // Calculate the number of selected drivers\n  const selectedCount = Object.values(selectedDrivers).filter(selected => selected).length;\n\n  // Modify the handlePostData function\n  const handlePostData = async () => {\n    const driverNames = [];\n    const constructorNames = [];\n\n    // Collect driver and constructor pairs\n    Object.keys(selectedDrivers).filter(key => selectedDrivers[key]) // Filter for selected drivers\n    .forEach(key => {\n      const [driverId, constructorId] = key.split('-');\n      const driverPair = driverConstructorPairs.find(pair => pair.driverId === driverId && pair.constructorId === constructorId);\n      if (driverPair) {\n        driverNames.push(driverPair.driverName); // Add driver name to array\n        constructorNames.push(driverPair.constructorName); // Add constructor name to array\n      }\n    });\n    const jsonData = {\n      data: {\n        driver: driverNames,\n        // Array of driver names\n        constructor: constructorNames // Array of constructor names\n      },\n      GP_name: nextRaceCircuit // Include circuit name\n    };\n    console.log(jsonData);\n    try {\n      const response = await fetch('predict/2', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(jsonData)\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log(\"API Result:\", result); // Log the API result\n\n        // Check if result.data is a string and parse it\n        const parsedData = typeof result.data === 'string' ? JSON.parse(result.data) : [];\n\n        // Set results to the parsed data\n        setResults(parsedData);\n        setShowResults(true);\n      } else {\n        console.error('Error posting data');\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const renderResults = () => {\n    return results.map(({\n      driver,\n      constructor,\n      prediction\n    }) => {\n      let predictionLabel;\n      let badgeClass;\n      switch (prediction) {\n        case 1:\n          predictionLabel = \"Podium Finish\";\n          badgeClass = \"badge badge-podium\";\n          break;\n        case 2:\n          predictionLabel = \"Points Finish\";\n          badgeClass = \"badge badge-points\";\n          break;\n        case 3:\n          predictionLabel = \"No Points/DNF\";\n          badgeClass = \"badge badge-dnf\";\n          break;\n        default:\n          predictionLabel = \"Unknown Outcome\";\n          badgeClass = \"badge\";\n        // Default class without specific color\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prediction-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prediction-driver-name\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: driver\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prediction-constructor-name\",\n            children: [\"(\", constructor, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prediction-details\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: badgeClass,\n            children: [\" \", predictionLabel]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)]\n      }, `${driver}-${constructor}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"predict-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading constructors...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }, this) : showResults ?\n    /*#__PURE__*/\n    // Conditional rendering\n    _jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Prediction Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this), renderResults(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"result-button\",\n          onClick: () => setShowResults(false),\n          children: \"Back to Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"predict-race-info\",\n        children: [\"Next Race: \", latestRaceName, \" on \", latestRaceDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Drivers: \", selectedCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: handlePostData,\n          disabled: selectedCount === 0,\n          children: \"Submit Selected Drivers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }, this), driverConstructorPairs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No drivers found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"predict-drivers\",\n        children: driverConstructorPairs.map(pair => {\n          const isSelected = selectedDrivers[`${pair.driverId}-${pair.constructorId}`];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `predict-driver-card ${isSelected ? 'selected' : ''}`,\n            onClick: () => handleSelectDriver(pair.driverId, pair.constructorId),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"predict-driver-name\",\n              children: pair.driverName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"predict-constructor-name\",\n              children: pair.constructorName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"predict-driver-checkbox\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: isSelected,\n                onChange: () => handleSelectDriver(pair.driverId, pair.constructorId)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 41\n            }, this)]\n          }, `${pair.driverId}-${pair.constructorId}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, this);\n}\n_s(Predict, \"4ojgQ274Rtf2x83aajzZPKS2tvM=\");\n_c = Predict;\nexport default Predict;\nvar _c;\n$RefreshReg$(_c, \"Predict\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Predict","_s","data","setData","constructors","setConstructors","drivers","setDrivers","loading","setLoading","selectedDrivers","setSelectedDrivers","latestRaceName","setLatestRaceName","latestRaceDate","setLatestRaceDate","nextRaceCircuit","setNextRaceCircuit","results","setResults","showResults","setShowResults","fetch","then","res","json","catch","error","console","fetchConstructors","response","MRData","ConstructorTable","Constructors","constructor","driversResponse","constructorId","driversData","prev","DriverTable","Drivers","fetchAllRaces","races","RaceTable","Races","today","Date","toISOString","split","latestRace","filter","race","date","sort","a","b","raceName","Circuit","circuitName","driverConstructorPairs","forEach","constructorDrivers","driver","push","driverId","driverName","givenName","familyName","constructorName","name","handleSelectDriver","key","selectedCount","Object","values","selected","length","handlePostData","driverNames","constructorNames","keys","driverPair","find","pair","jsonData","GP_name","log","method","headers","body","JSON","stringify","ok","result","parsedData","parse","renderResults","map","prediction","predictionLabel","badgeClass","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","isSelected","type","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/kqtan/DS projects/flask-react-app/src/components/Predict.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Predict.css';\r\n\r\nfunction Predict() {\r\n    const [data, setData] = useState(null);\r\n    const [constructors, setConstructors] = useState([]);\r\n    const [drivers, setDrivers] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [selectedDrivers, setSelectedDrivers] = useState({});\r\n    const [latestRaceName, setLatestRaceName] = useState('');\r\n    const [latestRaceDate, setLatestRaceDate] = useState('');\r\n    const [nextRaceCircuit, setNextRaceCircuit] = useState('');\r\n    const [results, setResults] = useState([]);\r\n    const [showResults, setShowResults] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetch('/predict/1')\r\n            .then(res => res.json())\r\n            .then(data => setData(data))\r\n            .catch(error => console.error(\"Error fetching data:\", error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchConstructors = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await fetch('https://ergast.com/api/f1/2024/constructors.json');\r\n                const data = await response.json();\r\n                setConstructors(data.MRData.ConstructorTable.Constructors);\r\n                \r\n                for (const constructor of data.MRData.ConstructorTable.Constructors) {\r\n                    const driversResponse = await fetch(`https://ergast.com/api/f1/2024/constructors/${constructor.constructorId}/drivers.json`);\r\n                    const driversData = await driversResponse.json();\r\n                    setDrivers(prev => ({\r\n                        ...prev,\r\n                        [constructor.constructorId]: driversData.MRData.DriverTable.Drivers,\r\n                    }));\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching constructors:\", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchConstructors();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchAllRaces = async () => {\r\n            try {\r\n                const response = await fetch('https://ergast.com/api/f1/2024.json');\r\n                const data = await response.json();\r\n                const races = data.MRData.RaceTable.Races;\r\n                const today = new Date().toISOString().split('T')[0];\r\n                const latestRace = races\r\n                    .filter(race => race.date >= today)\r\n                    .sort((a, b) => new Date(a.date) - new Date(b.date))[0];\r\n    \r\n                if (latestRace) {\r\n                    setLatestRaceName(latestRace.raceName);\r\n                    setLatestRaceDate(latestRace.date);\r\n                    setNextRaceCircuit(latestRace.Circuit.circuitName); // Store the circuit name\r\n                } else {\r\n                    setLatestRaceName('No upcoming races found');\r\n                    setLatestRaceDate('');\r\n                    setNextRaceCircuit('');\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching races:\", error);\r\n            }\r\n        };\r\n    \r\n        fetchAllRaces();\r\n    }, []);\r\n\r\n    const driverConstructorPairs = [];\r\n\r\n    constructors.forEach(constructor => {\r\n        const constructorDrivers = drivers[constructor.constructorId] || [];\r\n        constructorDrivers.forEach(driver => {\r\n            driverConstructorPairs.push({\r\n                driverId: driver.driverId,\r\n                constructorId: constructor.constructorId,\r\n                driverName: `${driver.givenName} ${driver.familyName}`,\r\n                constructorName: constructor.name,\r\n            });\r\n        });\r\n    });\r\n\r\n    const handleSelectDriver = (driverId, constructorId) => {\r\n        const key = `${driverId}-${constructorId}`;\r\n        setSelectedDrivers(prev => ({\r\n            ...prev,\r\n            [key]: !prev[key], // Toggle selection\r\n        }));\r\n    };\r\n\r\n    // Calculate the number of selected drivers\r\n    const selectedCount = Object.values(selectedDrivers).filter(selected => selected).length;\r\n    \r\n    // Modify the handlePostData function\r\n    const handlePostData = async () => {\r\n        const driverNames = [];\r\n        const constructorNames = [];\r\n    \r\n        // Collect driver and constructor pairs\r\n        Object.keys(selectedDrivers)\r\n            .filter(key => selectedDrivers[key]) // Filter for selected drivers\r\n            .forEach(key => {\r\n                const [driverId, constructorId] = key.split('-');\r\n                const driverPair = driverConstructorPairs.find(pair => pair.driverId === driverId && pair.constructorId === constructorId);\r\n                if (driverPair) {\r\n                    driverNames.push(driverPair.driverName); // Add driver name to array\r\n                    constructorNames.push(driverPair.constructorName); // Add constructor name to array\r\n                }\r\n            });\r\n    \r\n        const jsonData = {\r\n            data: {\r\n                driver: driverNames, // Array of driver names\r\n                constructor: constructorNames, // Array of constructor names\r\n            },\r\n            GP_name: nextRaceCircuit, // Include circuit name\r\n        };\r\n    \r\n        console.log(jsonData);\r\n        try {\r\n            const response = await fetch('predict/2', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(jsonData),\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                console.log(\"API Result:\", result); // Log the API result\r\n    \r\n                // Check if result.data is a string and parse it\r\n                const parsedData = typeof result.data === 'string' ? JSON.parse(result.data) : [];\r\n    \r\n                // Set results to the parsed data\r\n                setResults(parsedData);\r\n                setShowResults(true);\r\n            } else {\r\n                console.error('Error posting data');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n        }\r\n    };\r\n\r\n    const renderResults = () => {\r\n        return results.map(({ driver, constructor, prediction }) => {\r\n            let predictionLabel;\r\n            let badgeClass;\r\n    \r\n            switch (prediction) {\r\n                case 1:\r\n                    predictionLabel = \"Podium Finish\";\r\n                    badgeClass = \"badge badge-podium\";\r\n                    break;\r\n                case 2:\r\n                    predictionLabel = \"Points Finish\";\r\n                    badgeClass = \"badge badge-points\";\r\n                    break;\r\n                case 3:\r\n                    predictionLabel = \"No Points/DNF\";\r\n                    badgeClass = \"badge badge-dnf\";\r\n                    break;\r\n                default:\r\n                    predictionLabel = \"Unknown Outcome\";\r\n                    badgeClass = \"badge\"; // Default class without specific color\r\n            }\r\n    \r\n            return (\r\n                <div key={`${driver}-${constructor}`} className=\"prediction-card\">\r\n                    <div className=\"prediction-driver-name\">\r\n                        <div>{driver}</div>\r\n                        <div className=\"prediction-constructor-name\">({constructor})</div>\r\n                    </div>\r\n                    <div className=\"prediction-details\">\r\n                        <span className={badgeClass}> {predictionLabel}</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n    \r\n\r\n    return (\r\n        <div className=\"predict-container\">\r\n            {/* <h1>{data ? data.message : \"Loading...\"}</h1> */}\r\n    \r\n            {loading ? (\r\n                <p>Loading constructors...</p>\r\n            ) : showResults ? ( // Conditional rendering\r\n                <div className=\"result-container\">\r\n                    <h1>Prediction Results</h1>\r\n                    {renderResults()}\r\n                    <div className=\"result-button-container\">\r\n                        <button className=\"result-button\" onClick={() => setShowResults(false)}>Back to Selection</button>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <p className=\"predict-race-info\">Next Race: {latestRaceName} on {latestRaceDate}</p>\r\n                    <p>Selected Drivers: {selectedCount}</p>\r\n                    <div className=\"button-container\">\r\n                        <button className=\"button\" onClick={handlePostData} disabled={selectedCount === 0}>Submit Selected Drivers</button>\r\n                    </div>\r\n                    {driverConstructorPairs.length === 0 ? (\r\n                        <p>No drivers found.</p>\r\n                    ) : (\r\n                        <div className=\"predict-drivers\">\r\n                            {driverConstructorPairs.map(pair => {\r\n                                const isSelected = selectedDrivers[`${pair.driverId}-${pair.constructorId}`];\r\n                                return (\r\n                                    <div\r\n                                        key={`${pair.driverId}-${pair.constructorId}`}\r\n                                        className={`predict-driver-card ${isSelected ? 'selected' : ''}`}\r\n                                        onClick={() => handleSelectDriver(pair.driverId, pair.constructorId)}\r\n                                    >\r\n                                        <div className=\"predict-driver-name\">{pair.driverName}</div>\r\n                                        <div className=\"predict-constructor-name\">{pair.constructorName}</div>\r\n                                        <div className=\"predict-driver-checkbox\">\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={isSelected}\r\n                                                onChange={() => handleSelectDriver(pair.driverId, pair.constructorId)}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Predict;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kqtan\\\\DS projects\\\\flask-react-app\\\\src\\\\components\\\\Predict.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Driver.css'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Predict() {\n  _s();\n  const [data, setData] = useState(null);\n  const [constructors, setConstructors] = useState([]);\n  const [drivers, setDrivers] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [selectedDrivers, setSelectedDrivers] = useState(new Set());\n  useEffect(() => {\n    fetch('/predict/1').then(res => res.json()).then(data => setData(data)).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  useEffect(() => {\n    const fetchConstructors = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('https://ergast.com/api/f1/2024/constructors.json');\n        const data = await response.json();\n        setConstructors(data.MRData.ConstructorTable.Constructors);\n        for (const constructor of data.MRData.ConstructorTable.Constructors) {\n          const driversResponse = await fetch(`https://ergast.com/api/f1/2024/constructors/${constructor.constructorId}/drivers.json`);\n          const driversData = await driversResponse.json();\n          setDrivers(prev => ({\n            ...prev,\n            [constructor.constructorId]: driversData.MRData.DriverTable.Drivers\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching constructors:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchConstructors();\n  }, []);\n\n  // Create a list of distinct driver-constructor pairs\n  const driverConstructorPairs = [];\n  constructors.forEach(constructor => {\n    const constructorDrivers = drivers[constructor.constructorId] || [];\n    constructorDrivers.forEach(driver => {\n      driverConstructorPairs.push({\n        driverId: driver.driverId,\n        driverName: `${driver.givenName} ${driver.familyName}`,\n        constructorName: constructor.name\n      });\n    });\n  });\n  const handleSelectDriver = driverId => {\n    setSelectedDrivers(prev => {\n      const newSelected = new Set(prev);\n      if (newSelected.has(driverId)) {\n        newSelected.delete(driverId); // Deselect if already selected\n      } else {\n        newSelected.add(driverId); // Select if not selected\n      }\n      return newSelected;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"driver-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: data ? data.message : \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading constructors...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Choose a Driver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), driverConstructorPairs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No drivers found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"drivers\",\n        children: driverConstructorPairs.map(pair => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `driver-card ${selectedDrivers.has(pair.driverId) ? 'selected' : ''}`,\n          onClick: () => handleSelectDriver(pair.driverId),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"driver-name\",\n            children: pair.driverName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"driver-details\",\n            children: [pair.constructorName, /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedDrivers.has(pair.driverId),\n              onChange: () => handleSelectDriver(pair.driverId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 37\n          }, this)]\n        }, `${pair.driverId}-${pair.constructorName}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(Predict, \"xptHCZRXFHnZdYVKpwRFEQQfWkw=\");\n_c = Predict;\nexport default Predict;\nvar _c;\n$RefreshReg$(_c, \"Predict\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Predict","_s","data","setData","constructors","setConstructors","drivers","setDrivers","loading","setLoading","selectedDrivers","setSelectedDrivers","Set","fetch","then","res","json","catch","error","console","fetchConstructors","response","MRData","ConstructorTable","Constructors","constructor","driversResponse","constructorId","driversData","prev","DriverTable","Drivers","driverConstructorPairs","forEach","constructorDrivers","driver","push","driverId","driverName","givenName","familyName","constructorName","name","handleSelectDriver","newSelected","has","delete","add","className","children","message","fileName","_jsxFileName","lineNumber","columnNumber","length","map","pair","onClick","type","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/kqtan/DS projects/flask-react-app/src/components/Predict.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Driver.css'; // Import your CSS file\r\n\r\nfunction Predict() {\r\n    const [data, setData] = useState(null);\r\n    const [constructors, setConstructors] = useState([]);\r\n    const [drivers, setDrivers] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [selectedDrivers, setSelectedDrivers] = useState(new Set());\r\n\r\n    useEffect(() => {\r\n        fetch('/predict/1')\r\n            .then(res => res.json())\r\n            .then(data => setData(data))\r\n            .catch(error => console.error(\"Error fetching data:\", error));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchConstructors = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await fetch('https://ergast.com/api/f1/2024/constructors.json');\r\n                const data = await response.json();\r\n                setConstructors(data.MRData.ConstructorTable.Constructors);\r\n                \r\n                for (const constructor of data.MRData.ConstructorTable.Constructors) {\r\n                    const driversResponse = await fetch(`https://ergast.com/api/f1/2024/constructors/${constructor.constructorId}/drivers.json`);\r\n                    const driversData = await driversResponse.json();\r\n                    setDrivers(prev => ({\r\n                        ...prev,\r\n                        [constructor.constructorId]: driversData.MRData.DriverTable.Drivers,\r\n                    }));\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching constructors:\", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchConstructors();\r\n    }, []);\r\n\r\n    // Create a list of distinct driver-constructor pairs\r\n    const driverConstructorPairs = [];\r\n\r\n    constructors.forEach(constructor => {\r\n        const constructorDrivers = drivers[constructor.constructorId] || [];\r\n        constructorDrivers.forEach(driver => {\r\n            driverConstructorPairs.push({\r\n                driverId: driver.driverId,\r\n                driverName: `${driver.givenName} ${driver.familyName}`,\r\n                constructorName: constructor.name,\r\n            });\r\n        });\r\n    });\r\n\r\n    const handleSelectDriver = (driverId) => {\r\n        setSelectedDrivers(prev => {\r\n            const newSelected = new Set(prev);\r\n            if (newSelected.has(driverId)) {\r\n                newSelected.delete(driverId); // Deselect if already selected\r\n            } else {\r\n                newSelected.add(driverId); // Select if not selected\r\n            }\r\n            return newSelected;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"driver-container\">\r\n            <h1>{data ? data.message : \"Loading...\"}</h1>\r\n\r\n            {loading ? (\r\n                <p>Loading constructors...</p>\r\n            ) : (\r\n                <div>\r\n                    <h1>Choose a Driver</h1>\r\n                    {driverConstructorPairs.length === 0 ? (\r\n                        <p>No drivers found.</p>\r\n                    ) : (\r\n                        <div className=\"drivers\">\r\n                            {driverConstructorPairs.map(pair => (\r\n                                <div\r\n                                    key={`${pair.driverId}-${pair.constructorName}`}\r\n                                    className={`driver-card ${selectedDrivers.has(pair.driverId) ? 'selected' : ''}`}\r\n                                    onClick={() => handleSelectDriver(pair.driverId)}\r\n                                >\r\n                                    <div className=\"driver-name\">{pair.driverName}</div>\r\n                                    <div className=\"driver-details\">\r\n                                        {pair.constructorName}\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            checked={selectedDrivers.has(pair.driverId)}\r\n                                            onChange={() => handleSelectDriver(pair.driverId)}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Predict;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}